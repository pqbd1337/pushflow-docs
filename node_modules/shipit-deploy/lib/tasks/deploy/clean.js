"use strict";

exports.__esModule = true;
exports.default = void 0;

var _shipitUtils = _interopRequireDefault(require("shipit-utils"));

var _extendShipit = _interopRequireDefault(require("../../extendShipit"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Clean task.
 * - Remove old releases.
 */
const cleanTask = shipit => {
  _shipitUtils.default.registerTask(shipit, 'deploy:clean',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    (0, _extendShipit.default)(shipit);
    shipit.log('Keeping "%d" last releases, cleaning others', shipit.config.keepReleases);
    const command = '(ls -rd ' + shipit.releasesPath + '/*|head -n ' + shipit.config.keepReleases + ';ls -d ' + shipit.releasesPath + '/*)|sort|uniq -u|xargs rm -rf';
    yield shipit.remote(command);
    shipit.emit('cleaned');
  }));
};

var _default = cleanTask;
exports.default = _default;