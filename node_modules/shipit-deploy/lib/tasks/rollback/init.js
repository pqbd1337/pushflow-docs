"use strict";

exports.__esModule = true;
exports.default = void 0;

var _shipitUtils = _interopRequireDefault(require("shipit-utils"));

var _posix = _interopRequireDefault(require("path2/posix"));

var _extendShipit = _interopRequireDefault(require("../../extendShipit"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Update task.
 * - Create and define release path.
 * - Remote copy project.
 */
var _default = shipit => {
  _shipitUtils.default.registerTask(shipit, 'rollback:init',
  /*#__PURE__*/
  _asyncToGenerator(function* () {
    (0, _extendShipit.default)(shipit);
    shipit.log('Get current release dirname.');
    const currentRelease = yield shipit.getCurrentReleaseDirname();

    if (!currentRelease) {
      throw new Error('Cannot find current release dirname.');
    }

    shipit.log('Current release dirname : %s.', currentRelease);
    shipit.log('Getting dist releases.');
    const releases = yield shipit.getReleases();

    if (!releases) {
      throw new Error('Cannot read releases.');
    }

    shipit.log('Dist releases : %j.', releases);
    const currentReleaseIndex = releases.indexOf(currentRelease);
    const rollbackReleaseIndex = currentReleaseIndex + 1;
    /* eslint-disable no-param-reassign */

    shipit.releaseDirname = releases[rollbackReleaseIndex]; // Save the previous release in case we need to delete it later

    shipit.prevReleaseDirname = releases[currentReleaseIndex];
    shipit.prevReleasePath = _posix.default.join(shipit.releasesPath, shipit.prevReleaseDirname);
    shipit.log('Will rollback to %s.', shipit.releaseDirname);

    if (!shipit.releaseDirname) {
      throw new Error('Cannot rollback, release not found.');
    }

    shipit.releasePath = _posix.default.join(shipit.releasesPath, shipit.releaseDirname);
    /* eslint-enable no-param-reassign */

    shipit.emit('rollback');
  }));
};

exports.default = _default;